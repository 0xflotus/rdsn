/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef fd_TYPES_H
#define fd_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

namespace dsn { namespace fd {

class beacon_msg;

class beacon_ack;

typedef struct _beacon_msg__isset {
  _beacon_msg__isset() : time(false), from(false), to(false) {}
  bool time :1;
  bool from :1;
  bool to :1;
} _beacon_msg__isset;

class beacon_msg {
 public:

  static const char* ascii_fingerprint; // = "C1553D56D339B9717EF283788B23652B";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x55,0x3D,0x56,0xD3,0x39,0xB9,0x71,0x7E,0xF2,0x83,0x78,0x8B,0x23,0x65,0x2B};

  beacon_msg(const beacon_msg&);
  beacon_msg& operator=(const beacon_msg&);
  beacon_msg() : time(0) {
  }

  virtual ~beacon_msg() throw();
  int64_t time;
   ::dsn::rpc_address from;
   ::dsn::rpc_address to;

  _beacon_msg__isset __isset;

  void __set_time(const int64_t val);

  void __set_from(const  ::dsn::rpc_address& val);

  void __set_to(const  ::dsn::rpc_address& val);

  bool operator == (const beacon_msg & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(from == rhs.from))
      return false;
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const beacon_msg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const beacon_msg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const beacon_msg& obj);
};

void swap(beacon_msg &a, beacon_msg &b);

typedef struct _beacon_ack__isset {
  _beacon_ack__isset() : time(false), this_node(false), primary_node(false), is_master(false), allowed(false) {}
  bool time :1;
  bool this_node :1;
  bool primary_node :1;
  bool is_master :1;
  bool allowed :1;
} _beacon_ack__isset;

class beacon_ack {
 public:

  static const char* ascii_fingerprint; // = "D681410B61D925467A524E160C7A0728";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0x81,0x41,0x0B,0x61,0xD9,0x25,0x46,0x7A,0x52,0x4E,0x16,0x0C,0x7A,0x07,0x28};

  beacon_ack(const beacon_ack&);
  beacon_ack& operator=(const beacon_ack&);
  beacon_ack() : time(0), is_master(0), allowed(0) {
  }

  virtual ~beacon_ack() throw();
  int64_t time;
   ::dsn::rpc_address this_node;
   ::dsn::rpc_address primary_node;
  bool is_master;
  bool allowed;

  _beacon_ack__isset __isset;

  void __set_time(const int64_t val);

  void __set_this_node(const  ::dsn::rpc_address& val);

  void __set_primary_node(const  ::dsn::rpc_address& val);

  void __set_is_master(const bool val);

  void __set_allowed(const bool val);

  bool operator == (const beacon_ack & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(this_node == rhs.this_node))
      return false;
    if (!(primary_node == rhs.primary_node))
      return false;
    if (!(is_master == rhs.is_master))
      return false;
    if (!(allowed == rhs.allowed))
      return false;
    return true;
  }
  bool operator != (const beacon_ack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const beacon_ack & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const beacon_ack& obj);
};

void swap(beacon_ack &a, beacon_ack &b);

}} // namespace

#endif
