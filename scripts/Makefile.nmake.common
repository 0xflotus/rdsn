ROOT = e:\rdsn
#ROOT = c:\projects\rdsn

BOOST_INC=$(ROOT)/external
rDSN_INC=$(ROOT)/inc
BIN_DIR_P1= $(ROOT)\bin

!IFNDEF DEBUG
BIN_DIR_P2= $(BIN_DIR_P1)\release
COMMON_LIBS= \
	libboost_chrono-vc120-mt-s-1_57.lib \
	libboost_date_time-vc120-mt-s-1_57.lib \
	libboost_filesystem-vc120-mt-s-1_57.lib \
	libboost_regex-vc120-mt-s-1_57.lib \
	libboost_system-vc120-mt-s-1_57.lib \
	libboost_thread-vc120-mt-s-1_57.lib \
	dsn.core.lib \
	dsn.dev.lib \
	dsn.tools.common.lib \
	dsn.tools.simulator.lib
DRFLAG = /Zi /O2 /MT /D "NDEBUG" 
!ELSE
BIN_DIR_P2= $(BIN_DIR_P1)\debug
COMMON_LIBS= \
	libboost_chrono-vc120-mt-sgd-1_57.lib \
	libboost_date_time-vc120-mt-sgd-1_57.lib \
	libboost_filesystem-vc120-mt-sgd-1_57.lib \
	libboost_regex-vc120-mt-sgd-1_57.lib \
	libboost_system-vc120-mt-sgd-1_57.lib \
	libboost_thread-vc120-mt-sgd-1_57.lib \
	dsn.core.lib \
	dsn.dev.lib \
	dsn.tools.common.lib \
	dsn.tools.simulator.lib
DRFLAG = /Zi /Od /MTd /D "_DEBUG"
!ENDIF

!IFDEF PLATFORM
BOOST_LIB = $(ROOT)/external/libs/$(PLATFORM)
BIN_DIR = $(BIN_DIR_P2)\$(PLATFORM)
!ELSE
BOOST_LIB = $(ROOT)/external/libs
BIN_DIR = $(BIN_DIR_P2)
!ENDIF

INC= $(INC_EXTRA) /I. /I$(BOOST_INC) /I$(rDSN_INC)
CPPFLAGS= $(INC) $(DRFLAG) /D_WIN32_WINNT=0x0501 /MP /W3 /nologo /wd4996 /EHsc \
		  /GS /analyze- /Zc:wchar_t \
		  /fp:precise /D "_CRT_SECURE_NO_WARNINGS" /D "WIN32" /D "_CONSOLE" \
		  /errorReport:prompt /WX- /Zc:forScope /Gd /Oy- /Oi
		  
LIBFLAGS= /nologo
LINKFLAGS = /LIBPATH:$(BOOST_LIB) /LIBPATH:$(BIN_DIR) $(COMMON_LIBS) $(LIB_EXTRA) /PDB:"$(BIN_DIR)\$(TARGET).pdb" /DEBUG /PROFILE

!if [bash -c "echo SOURCES = *.cpp" >.source.mk]
!error failed to generate source list
!endif
!include .source.mk

OBJS = $(SOURCES:.cpp=.obj)

all: $(TYPE)

#.cpp.obj:
#	$(CPP) $(CPPFLAGS) /c $< /Fo$@

$(BIN_DIR):
	-mkdir $(BIN_DIR_P1)
	-mkdir $(BIN_DIR_P2)
	-mkdir $(BIN_DIR)
	
clean:
	-del *.obj
	-del .source.mk
	-del *.idb
	-del *.pdb
	-del $(BIN_DIR)\$(TARGET)

EXE: $(BIN_DIR) $(OBJS)
	link $(LINKFLAGS) $(OBJS) /out:$(BIN_DIR)/$(TARGET)
	copy /Y *.ini $(BIN_DIR)

LIB: $(BIN_DIR) $(OBJS)
	lib $(LIBFLAGS) $(OBJS) /out:$(BIN_DIR)/$(TARGET)

