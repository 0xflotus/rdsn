/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cli_TYPES_H
#define cli_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dsn {

class command;

typedef struct _command__isset {
  _command__isset() : cmd(false), arguments(false) {}
  bool cmd :1;
  bool arguments :1;
} _command__isset;

class command {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  command(const command&);
  command& operator=(const command&);
  command() : cmd() {
  }

  virtual ~command() throw();
  std::string cmd;
  std::vector<std::string>  arguments;

  _command__isset __isset;

  void __set_cmd(const std::string& val);

  void __set_arguments(const std::vector<std::string> & val);

  bool operator == (const command & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const command& obj);
};

void swap(command &a, command &b);

} // namespace

#endif
