/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "deploy_svc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn { namespace dist {

deploy_request::~deploy_request() throw() {
}


void deploy_request::__set_package_id(const std::string& val) {
  this->package_id = val;
}

void deploy_request::__set_package_full_path(const std::string& val) {
  this->package_full_path = val;
}

void deploy_request::__set_package_server(const  ::dsn::rpc_address& val) {
  this->package_server = val;
}

void deploy_request::__set_cluster_name(const std::string& val) {
  this->cluster_name = val;
}

void deploy_request::__set_name(const std::string& val) {
  this->name = val;
}

const char* deploy_request::ascii_fingerprint = "6F8FC8DF693FB4AB5910001889C3A5D0";
const uint8_t deploy_request::binary_fingerprint[16] = {0x6F,0x8F,0xC8,0xDF,0x69,0x3F,0xB4,0xAB,0x59,0x10,0x00,0x18,0x89,0xC3,0xA5,0xD0};

uint32_t deploy_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->package_id);
          this->__isset.package_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->package_full_path);
          this->__isset.package_full_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->package_server.read(iprot);
          this->__isset.package_server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cluster_name);
          this->__isset.cluster_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t deploy_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("deploy_request");

  xfer += oprot->writeFieldBegin("package_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->package_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("package_full_path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->package_full_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("package_server", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->package_server.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cluster_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cluster_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(deploy_request &a, deploy_request &b) {
  using ::std::swap;
  swap(a.package_id, b.package_id);
  swap(a.package_full_path, b.package_full_path);
  swap(a.package_server, b.package_server);
  swap(a.cluster_name, b.cluster_name);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

deploy_request::deploy_request(const deploy_request& other0) {
  package_id = other0.package_id;
  package_full_path = other0.package_full_path;
  package_server = other0.package_server;
  cluster_name = other0.cluster_name;
  name = other0.name;
  __isset = other0.__isset;
}
deploy_request& deploy_request::operator=(const deploy_request& other1) {
  package_id = other1.package_id;
  package_full_path = other1.package_full_path;
  package_server = other1.package_server;
  cluster_name = other1.cluster_name;
  name = other1.name;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const deploy_request& obj) {
  using apache::thrift::to_string;
  out << "deploy_request(";
  out << "package_id=" << to_string(obj.package_id);
  out << ", " << "package_full_path=" << to_string(obj.package_full_path);
  out << ", " << "package_server=" << to_string(obj.package_server);
  out << ", " << "cluster_name=" << to_string(obj.cluster_name);
  out << ", " << "name=" << to_string(obj.name);
  out << ")";
  return out;
}


deploy_info::~deploy_info() throw() {
}


void deploy_info::__set_package_id(const std::string& val) {
  this->package_id = val;
}

void deploy_info::__set_name(const std::string& val) {
  this->name = val;
}

void deploy_info::__set_service_url(const std::string& val) {
  this->service_url = val;
}

void deploy_info::__set_error(const  ::dsn::error_code& val) {
  this->error = val;
}

void deploy_info::__set_cluster(const std::string& val) {
  this->cluster = val;
}

void deploy_info::__set_status(const service_status::type val) {
  this->status = val;
}

const char* deploy_info::ascii_fingerprint = "BD3EDD1B8AFF97C40D73AE2CA0366805";
const uint8_t deploy_info::binary_fingerprint[16] = {0xBD,0x3E,0xDD,0x1B,0x8A,0xFF,0x97,0xC4,0x0D,0x73,0xAE,0x2C,0xA0,0x36,0x68,0x05};

uint32_t deploy_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->package_id);
          this->__isset.package_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_url);
          this->__isset.service_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cluster);
          this->__isset.cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->status = (service_status::type)ecast2;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t deploy_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("deploy_info");

  xfer += oprot->writeFieldBegin("package_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->package_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->service_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->cluster);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(deploy_info &a, deploy_info &b) {
  using ::std::swap;
  swap(a.package_id, b.package_id);
  swap(a.name, b.name);
  swap(a.service_url, b.service_url);
  swap(a.error, b.error);
  swap(a.cluster, b.cluster);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

deploy_info::deploy_info(const deploy_info& other3) {
  package_id = other3.package_id;
  name = other3.name;
  service_url = other3.service_url;
  error = other3.error;
  cluster = other3.cluster;
  status = other3.status;
  __isset = other3.__isset;
}
deploy_info& deploy_info::operator=(const deploy_info& other4) {
  package_id = other4.package_id;
  name = other4.name;
  service_url = other4.service_url;
  error = other4.error;
  cluster = other4.cluster;
  status = other4.status;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const deploy_info& obj) {
  using apache::thrift::to_string;
  out << "deploy_info(";
  out << "package_id=" << to_string(obj.package_id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "service_url=" << to_string(obj.service_url);
  out << ", " << "error=" << to_string(obj.error);
  out << ", " << "cluster=" << to_string(obj.cluster);
  out << ", " << "status=" << to_string(obj.status);
  out << ")";
  return out;
}


deploy_info_list::~deploy_info_list() throw() {
}


void deploy_info_list::__set_services(const std::vector<deploy_info> & val) {
  this->services = val;
}

const char* deploy_info_list::ascii_fingerprint = "6275B1A81D664398D8E17DFD343D85AD";
const uint8_t deploy_info_list::binary_fingerprint[16] = {0x62,0x75,0xB1,0xA8,0x1D,0x66,0x43,0x98,0xD8,0xE1,0x7D,0xFD,0x34,0x3D,0x85,0xAD};

uint32_t deploy_info_list::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->services.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->services.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->services[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.services = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t deploy_info_list::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("deploy_info_list");

  xfer += oprot->writeFieldBegin("services", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->services.size()));
    std::vector<deploy_info> ::const_iterator _iter10;
    for (_iter10 = this->services.begin(); _iter10 != this->services.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(deploy_info_list &a, deploy_info_list &b) {
  using ::std::swap;
  swap(a.services, b.services);
  swap(a.__isset, b.__isset);
}

deploy_info_list::deploy_info_list(const deploy_info_list& other11) {
  services = other11.services;
  __isset = other11.__isset;
}
deploy_info_list& deploy_info_list::operator=(const deploy_info_list& other12) {
  services = other12.services;
  __isset = other12.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const deploy_info_list& obj) {
  using apache::thrift::to_string;
  out << "deploy_info_list(";
  out << "services=" << to_string(obj.services);
  out << ")";
  return out;
}


cluster_info::~cluster_info() throw() {
}


void cluster_info::__set_name(const std::string& val) {
  this->name = val;
}

void cluster_info::__set_type(const cluster_type::type val) {
  this->type = val;
}

const char* cluster_info::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t cluster_info::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t cluster_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->type = (cluster_type::type)ecast13;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t cluster_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("cluster_info");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(cluster_info &a, cluster_info &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

cluster_info::cluster_info(const cluster_info& other14) {
  name = other14.name;
  type = other14.type;
  __isset = other14.__isset;
}
cluster_info& cluster_info::operator=(const cluster_info& other15) {
  name = other15.name;
  type = other15.type;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const cluster_info& obj) {
  using apache::thrift::to_string;
  out << "cluster_info(";
  out << "name=" << to_string(obj.name);
  out << ", " << "type=" << to_string(obj.type);
  out << ")";
  return out;
}


cluster_list::~cluster_list() throw() {
}


void cluster_list::__set_clusters(const std::vector<cluster_info> & val) {
  this->clusters = val;
}

const char* cluster_list::ascii_fingerprint = "D50C2F9EC7D3B85649634752C0F64DC3";
const uint8_t cluster_list::binary_fingerprint[16] = {0xD5,0x0C,0x2F,0x9E,0xC7,0xD3,0xB8,0x56,0x49,0x63,0x47,0x52,0xC0,0xF6,0x4D,0xC3};

uint32_t cluster_list::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->clusters.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->clusters.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->clusters[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.clusters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t cluster_list::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("cluster_list");

  xfer += oprot->writeFieldBegin("clusters", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->clusters.size()));
    std::vector<cluster_info> ::const_iterator _iter21;
    for (_iter21 = this->clusters.begin(); _iter21 != this->clusters.end(); ++_iter21)
    {
      xfer += (*_iter21).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(cluster_list &a, cluster_list &b) {
  using ::std::swap;
  swap(a.clusters, b.clusters);
  swap(a.__isset, b.__isset);
}

cluster_list::cluster_list(const cluster_list& other22) {
  clusters = other22.clusters;
  __isset = other22.__isset;
}
cluster_list& cluster_list::operator=(const cluster_list& other23) {
  clusters = other23.clusters;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const cluster_list& obj) {
  using apache::thrift::to_string;
  out << "cluster_list(";
  out << "clusters=" << to_string(obj.clusters);
  out << ")";
  return out;
}

}} // namespace
