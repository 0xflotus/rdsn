/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "failure_detector.rdsn.h"

namespace dsn { namespace fd {


class failure_detector_service_example_impl : public failure_detector_service<failure_detector_service_example_impl>
{
public:
	// RPC_FAILURE_DETECTOR_PING
	virtual void ping(const beacon_msg& beacon, ::dsn::service::rpc_replier<beacon_ack>& reply)
	{
		std::cout << "exec rpc handler for RPC_FAILURE_DETECTOR_PING" << std::endl;
		beacon_ack resp;
		reply(resp);
	}
};

// shared server app
class fd_server_app : public ::dsn::service::service_app
{
public:
	fd_server_app(::dsn::service_app_spec* s, ::dsn::configuration_ptr c) 
		: ::dsn::service::service_app(s, c) {}

	virtual ::dsn::error_code start(int argc, char** argv)
	{
		_failure_detector_svc.open_service();
		return ::dsn::ERR_SUCCESS;
	}

	virtual void stop(bool cleanup = false)
	{
		_failure_detector_svc.close_service();
	}

private:
	 failure_detector_service_example_impl _failure_detector_svc;
};


DEFINE_TASK_CODE(LPC_FD_TEST_CLIENT_TIMER, ::dsn::TASK_PRIORITY_COMMON, THREAD_POOL_FD_DEFAULT)

// shared client app
class fd_client_app : public ::dsn::service::service_app, public virtual ::dsn::service::servicelet
{
public:
	fd_client_app(::dsn::service_app_spec* s, ::dsn::configuration_ptr c) 
		: ::dsn::service::service_app(s, c) {}

	virtual ::dsn::error_code start(int argc, char** argv)
	{
		if (argc < 3)
			return ::dsn::ERR_INVALID_PARAMETERS;

		_server = ::dsn::end_point(argv[1], (uint16_t)atoi(argv[2]));
		_timer = ::dsn::service::tasking::enqueue(LPC_FD_TEST_CLIENT_TIMER, this, &fd_client_app::on_test_timer, 0, 0, 1000);
		return ::dsn::ERR_SUCCESS;
	}

	virtual void stop(bool cleanup = false)
	{
		_timer->cancel(true);
	}

	void on_test_timer()
	{
		{
			std::shared_ptr<beacon_msg> beacon(new beacon_msg());
			_failure_detector_client.begin_ping(_server, beacon);
		}
	}

private:
	::dsn::task_ptr _timer;
	::dsn::end_point _server;
	 failure_detector_async_client _failure_detector_client;
};


}} // namespace

